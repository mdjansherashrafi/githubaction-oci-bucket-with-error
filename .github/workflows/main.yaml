name: Simulate MissingContentLength Error

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  OCI_REGION: 'me-riyadh-1'  # Replace with your OCI region
  OCI_NAMESPACE: 'axjejvuhn1me'  # Replace with your OCI namespace
  OCI_BUCKET: 'githubaction-demo-1'  # Your OCI bucket name
  MULTIPART_THRESHOLD: '52428800'  # 50MB threshold
  OCI_CLI_SUPPRESS_FILE_PERMISSIONS_WARNING: 'True'  # Suppress permissions warning

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install Python and OCI CLI
      - name: Install Python and pip
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip

      - name: Install OCI CLI via pip (recommended)
        run: |
          python3 -m pip install oci-cli --upgrade
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          oci --version

      # Configure OCI credentials (with secrets from GitHub)
      - name: Configure OCI Credentials
        run: |
          mkdir -p ~/.oci
          cat > ~/.oci/config <<EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ env.OCI_REGION }}
          key_file=~/.oci/oci_api_key.pem
          pass_phrase=${{ secrets.OCI_KEY_PASSPHRASE }}
          EOF
          
          cat > ~/.oci/oci_api_key.pem <<EOF
          ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_API_KEY
          EOF
          
          chmod 600 ~/.oci/oci_api_key.pem ~/.oci/config

      # Verify authentication by listing namespaces
      - name: Verify Authentication
        run: |
          date  # Check clock sync
          oci os ns get  # Test OCI access

      # Ensure large-files directory exists before creating the corrupted file
      - name: Create a corrupted file (simulated metadata issue)
        run: |
          mkdir -p large-files  # Create the directory if it doesn't exist
          echo "Simulating corrupted file for upload"
          dd if=/dev/urandom of=large-files/corrupted-file.mp4 bs=1M count=5  # 5MB file with random data
          echo "Corrupted file created"

      # Simulate partial upload of the file by uploading a smaller part of the file
      - name: Partially upload the file (simulating a failed upload)
        run: |
          echo "Simulating partial upload"
          split -b 1M large-files/corrupted-file.mp4 large-files/split-file-part-  # Split file into parts of 1MB
          # Upload the first part to simulate a partial upload
          oci os object put --namespace $OCI_NAMESPACE --bucket-name $OCI_BUCKET --file large-files/split-file-part-aa --name split-file-part-aa --force
          echo "Partial file uploaded (simulating a failed or incomplete upload)"

      # Simulate missing Content-Length header during upload (this can trigger the error)
      - name: Upload file without Content-Length header
        run: |
          echo "Uploading the file without Content-Length header"
          curl -X PUT -T large-files/corrupted-file.mp4 \
          "https://objectstorage.${{ env.OCI_REGION }}.oraclecloud.com/n/${{ env.OCI_NAMESPACE }}/b/${{ env.OCI_BUCKET }}/o/corrupted-file.mp4" \
          --header "Content-Type: application/octet-stream"  # Missing Content-Length
          echo "File uploaded without Content-Length header"

      # Verify the uploads by listing objects in the OCI bucket
      - name: Verify Uploads
        run: |
          echo "Listing objects in OCI bucket to verify upload:"
          oci os object list --namespace $OCI_NAMESPACE --bucket-name $OCI_BUCKET --output table
